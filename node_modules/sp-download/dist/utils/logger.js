"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.resolveLogLevel = exports.Logger = void 0;
var Logger = (function () {
    function Logger(level) {
        this.level = typeof level !== 'undefined' ? level : 3;
    }
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.level >= 5) {
            console.log.apply(console, args);
        }
    };
    Logger.prototype.verbose = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.level >= 4) {
            console.log.apply(console, args);
        }
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.level >= 3) {
            console.log.apply(console, args);
        }
    };
    Logger.prototype.warning = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.level >= 2) {
            console.log.apply(console, args);
        }
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.level >= 1) {
            console.log.apply(console, args);
        }
    };
    return Logger;
}());
exports.Logger = Logger;
var resolveLogLevel = function (levelSrt) {
    if (levelSrt === void 0) { levelSrt = ''; }
    var levels = ['Off', 'Error', 'Warning', 'Info', 'Verbose', 'Debug'].map(function (n) { return n.toLowerCase(); });
    var l = 3;
    if (levels.indexOf(("" + levelSrt).toLowerCase()) !== -1) {
        l = levels.indexOf(("" + levelSrt).toLowerCase());
    }
    else {
        var ll = parseInt("" + levelSrt, 10);
        if (ll >= 0 && ll <= levels.length - 1) {
            l = ll;
        }
    }
    return l;
};
exports.resolveLogLevel = resolveLogLevel;
exports.logger = new Logger(exports.resolveLogLevel(process.env.LOG_LEVEL));
//# sourceMappingURL=logger.js.map