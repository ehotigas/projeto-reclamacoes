"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = void 0;
var sp_request_1 = require("sp-request");
var node_sp_auth_1 = require("node-sp-auth");
var node_sp_auth_config_1 = require("node-sp-auth-config");
var fs = require("fs");
var path = require("path");
var mkdirp = require("mkdirp");
var https = require("https");
var colors = require("colors");
var request = require("request");
var got_1 = require("got");
var logger_1 = require("../utils/logger");
var isUrlHttps = function (url) {
    return url.split('://')[0].toLowerCase() === 'https';
};
var Download = (function () {
    function Download(context, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.downloadFile = function (spFileAbsolutePath, saveTo) {
            if (saveTo === void 0) { saveTo = './'; }
            return __awaiter(_this, void 0, void 0, function () {
                var childUrlArr, childUrl, web, baseHostPath, spRelativeFilePath, saveFilePath, saveFolderPath, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.info(colors.gray("Downloading: " + colors.green(spFileAbsolutePath)));
                            childUrlArr = spFileAbsolutePath.split('/');
                            childUrlArr.pop();
                            childUrl = childUrlArr.join('/');
                            return [4, this.getWebByAnyChildUrl(childUrl)];
                        case 1:
                            web = _a.sent();
                            baseHostPath = web.Url.replace(web.ServerRelativeUrl, '');
                            spRelativeFilePath = spFileAbsolutePath.replace(baseHostPath, '');
                            saveFilePath = this.getSaveFilePath(saveTo, spRelativeFilePath);
                            saveFolderPath = path.dirname(saveFilePath);
                            return [4, mkdirp(saveFolderPath)];
                        case 2:
                            _a.sent();
                            return [4, this.downloadFileAsStream(web.Url, spRelativeFilePath)];
                        case 3:
                            req = _a.sent();
                            return [2, new Promise(function (resolve, reject) {
                                    req.pipe(fs.createWriteStream(saveFilePath))
                                        .on('error', reject)
                                        .on('finish', function () { return resolve(saveFilePath); });
                                })];
                    }
                });
            });
        };
        this.downloadFileFromSite = function (siteUrl, spRelativeFilePath, saveTo) {
            if (saveTo === void 0) { saveTo = './'; }
            return __awaiter(_this, void 0, void 0, function () {
                var saveFilePath, saveFolderPath, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.info(colors.gray("Downloading: " + colors.green(spRelativeFilePath)));
                            saveFilePath = this.getSaveFilePath(saveTo, spRelativeFilePath);
                            saveFolderPath = path.dirname(saveFilePath);
                            return [4, mkdirp(saveFolderPath)];
                        case 1:
                            _a.sent();
                            return [4, this.downloadFileAsStream(siteUrl, spRelativeFilePath)];
                        case 2:
                            req = _a.sent();
                            return [2, new Promise(function (resolve, reject) {
                                    req.pipe(fs.createWriteStream(saveFilePath))
                                        .on('error', reject)
                                        .on('finish', function () { return resolve(saveFilePath); });
                                })];
                    }
                });
            });
        };
        this.downloadFileAsStream = function (siteUrl, spRelativeFilePath) { return __awaiter(_this, void 0, void 0, function () {
            var hostUrl, endpointUrl, auth, options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hostUrl = siteUrl.split('/').slice(0, 3).join('/');
                        endpointUrl = spRelativeFilePath.indexOf('/_vti_history/') !== -1
                            ? "" + hostUrl + encodeURIComponent(spRelativeFilePath).replace(/%2F/g, '/')
                            : siteUrl + "/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/$value" +
                                ("?@FileServerRelativeUrl='" + encodeURIComponent(spRelativeFilePath) + "'");
                        return [4, Promise.resolve(node_sp_auth_1.getAuth(siteUrl, this.context))];
                    case 1:
                        auth = _a.sent();
                        options = __assign({ url: endpointUrl, headers: __assign(__assign({}, auth.headers), { 'User-Agent': 'sp-download' }), encoding: null, strictSSL: false, gzip: true, agent: isUrlHttps(siteUrl) ? this.agent : undefined }, auth.options);
                        return [2, request.get(options)];
                }
            });
        }); };
        this.getWebByAnyChildUrl = function (anyChildUrl) {
            return new Promise(function (resolve, reject) {
                var restUrl = anyChildUrl + "/_api/web?$select=Url,ServerRelativeUrl";
                _this.spr.get(restUrl, {
                    headers: {
                        Accept: 'application/json;odata=verbose'
                    }
                })
                    .then(function (response) { return resolve(response.body.d); })
                    .catch(function (err) {
                    var statusCode = err instanceof got_1.HTTPError ? err.response.statusCode : '500';
                    if (statusCode === 404) {
                        var childUrlArr = anyChildUrl.split('/');
                        childUrlArr.pop();
                        var childUrl = childUrlArr.join('/');
                        if (childUrlArr.length <= 2) {
                            return reject("Wrong url, can't get Web property");
                        }
                        else {
                            return resolve(_this.getWebByAnyChildUrl(childUrl));
                        }
                    }
                    else if (statusCode === 401) {
                        _this.logger.error(colors.red('401, Access Denied'));
                        _this.promptForCreds()
                            .then(function () { return resolve(_this.getWebByAnyChildUrl(anyChildUrl)); })
                            .catch(reject);
                    }
                    else {
                        return reject(err);
                    }
                });
            });
        };
        this.initContext = function (context) {
            _this.spr = sp_request_1.create(context);
            _this.context = context;
            _this.agent = new https.Agent({
                rejectUnauthorized: false,
                keepAlive: true,
                keepAliveMsecs: 10000
            });
        };
        this.promptForCreds = function () { return __awaiter(_this, void 0, void 0, function () {
            var context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, new node_sp_auth_config_1.AuthConfig({
                            authOptions: this.context,
                            forcePrompts: true
                        })
                            .getContext()];
                    case 1:
                        context = _a.sent();
                        this.initContext(context.authOptions);
                        this.logger.info(colors.gray('Trying to download with new creds...'));
                        return [2, context];
                }
            });
        }); };
        this.getSaveFilePath = function (saveTo, spRelativeFilePath) {
            var saveFilePath = path.resolve(saveTo);
            var originalFileName = decodeURIComponent(spRelativeFilePath).split('/').pop();
            try {
                if (fs.lstatSync(saveFilePath).isDirectory()) {
                    saveFilePath = path.join(saveFilePath, originalFileName);
                }
            }
            catch (e) {
            }
            if (path.parse(saveFilePath).ext !== path.parse(originalFileName).ext) {
                saveFilePath = path.join(saveFilePath, originalFileName);
            }
            return saveFilePath;
        };
        this.initContext(context);
        this.logger = new logger_1.Logger(logger_1.resolveLogLevel(options.logLevel));
    }
    return Download;
}());
exports.Download = Download;
//# sourceMappingURL=Download.js.map