"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.requestDigestCache = void 0;
var util = require("util");
var spauth = require("node-sp-auth");
var crypto = require("crypto");
var https = require("https");
var got_1 = require("got");
var Cache_1 = require("./utils/Cache");
exports.requestDigestCache = new Cache_1.Cache();
var isUrlHttps = function (url) {
    return url.split('://')[0].toLowerCase() === 'https';
};
function create(credentials) {
    var _this = this;
    var agent = new https.Agent({
        rejectUnauthorized: false,
        keepAlive: true,
        keepAliveMsecs: 10000
    });
    var coreRequest = function (options) { return __awaiter(_this, void 0, void 0, function () {
        var additionalHeadersStr, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options.throwHttpErrors = true;
                    options.headers = options.headers || {};
                    options.headers = Object.assign({
                        'Accept': 'application/json;odata=verbose',
                        'Content-Type': 'application/json;odata=verbose'
                    }, options.headers);
                    additionalHeadersStr = process.env['_sp_request_headers'];
                    if (additionalHeadersStr) {
                        Object.assign(options.headers, JSON.parse(additionalHeadersStr));
                    }
                    options = Object.assign({
                        responseType: 'json',
                        resolveBodyOnly: false,
                        rejectUnauthorized: false,
                        retry: 0,
                        agent: isUrlHttps(options.url) ? agent : undefined
                    }, options);
                    return [4, spauth.getAuth(options.url.toString(), credentials)];
                case 1:
                    data = _a.sent();
                    Object.assign(options.headers, data.headers);
                    Object.assign(options, data.options);
                    if (options.responseType === 'json') {
                        options.json = options.body;
                        options.body = undefined;
                    }
                    return [4, got_1.default(options)];
                case 2: return [2, _a.sent()];
            }
        });
    }); };
    var spRequestFunc = (function (url, options) {
        if (typeof url === 'string') {
            options = __assign({ url: url }, options);
        }
        else {
            options = __assign(__assign({}, url), options);
        }
        if (!options.method) {
            options.method = 'get';
        }
        return coreRequest(options);
    });
    spRequestFunc.requestDigest = function (siteUrl) { return __awaiter(_this, void 0, void 0, function () {
        var url, cacheKey, cachedDigest, response, digest, timeout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = siteUrl.replace(/\/$/, '');
                    cacheKey = crypto.createHash('md5').update(util.format('%s@%s', url, JSON.stringify(credentials))).digest('hex');
                    cachedDigest = exports.requestDigestCache.get(cacheKey);
                    if (cachedDigest) {
                        return [2, cachedDigest];
                    }
                    return [4, spRequestFunc.post(url + "/_api/contextinfo", { responseType: 'json' })];
                case 1:
                    response = _a.sent();
                    digest = response.body.d.GetContextWebInformation.FormDigestValue;
                    timeout = parseInt(response.body.d.GetContextWebInformation.FormDigestTimeoutSeconds, 10);
                    exports.requestDigestCache.set(cacheKey, digest, timeout - 30);
                    return [2, digest];
            }
        });
    }); };
    ['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(function (method) {
        spRequestFunc[method] = function (url, options) { return spRequestFunc(url, __assign(__assign({}, options), { method: method })); };
    });
    return spRequestFunc;
}
exports.create = create;
//# sourceMappingURL=SPRequest.js.map